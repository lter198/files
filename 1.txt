package com.example.action;

import com.example.form.QuestionForm;
import com.example.service.QuestionService;
import com.example.dto.QuestionDTO;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.*;
import java.util.List;

public class QuestioninitAction extends Action {

    private final QuestionService service = new QuestionService();

    @Override
    public ActionForward execute(ActionMapping mapping, ActionForm form,
                                 HttpServletRequest request, HttpServletResponse response) throws Exception {

        QuestionForm qForm = (QuestionForm) form;
        String method = qForm.getMethod();

        if (method == null) {
            // 初期表示
            List<QuestionDTO> list = service.init();
            request.setAttribute("questionList", list);
            return mapping.findForward("success");
        }

        switch (method) {
            case "登録":
                service.register(qForm);
                break;
            case "変更入力":
                service.update(qForm);
                break;
            case "削除":
                service.delete(qForm.getQuestionId());
                break;
            case "検索":
                List<QuestionDTO> result = service.search(qForm);
                request.setAttribute("questionList", result);
                return mapping.findForward("success");
        }

        // 更新後再検索
        List<QuestionDTO> list = service.init();
        request.setAttribute("questionList", list);
        return mapping.findForward("success");
    }
}


package com.example.service;

import com.example.dto.QuestionDTO;
import com.example.dao.QuestionDAO;
import com.example.form.QuestionForm;

import java.util.List;

public class QuestionService {
    private final QuestionDAO dao = new QuestionDAO();

    public List<QuestionDTO> init() throws Exception {
        return dao.search(null, null); // 初期表示：全部検索
    }

    public void register(QuestionForm form) throws Exception {
        QuestionDTO dto = convertFormToDTO(form);
        if (dto.getQuestionId() == null || dto.getQuestionId().isEmpty()) {
            dto.setQuestionId(String.valueOf(dao.getNextId()));
        }
        dao.insert(dto);
    }

    public void update(QuestionForm form) throws Exception {
        QuestionDTO dto = convertFormToDTO(form);
        dao.update(dto);
    }

    public void delete(String id) throws Exception {
        dao.delete(id);
    }

    public List<QuestionDTO> search(QuestionForm form) throws Exception {
        return dao.search(form.getQuestionId(), form.getQuestionContent());
    }

    private QuestionDTO convertFormToDTO(QuestionForm form) {
        QuestionDTO dto = new QuestionDTO();
        dto.setQuestionId(form.getQuestionId());
        dto.setQuestionContent(form.getQuestionContent());
        return dto;
    }
}


