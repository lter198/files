CREATE DATABASE QuestionDB;
GO

USE QuestionDB;
GO

CREATE TABLE Questions (
    id INT IDENTITY(1,1) PRIMARY KEY,
    content NVARCHAR(30) NOT NULL
);


<web-app>
    <servlet>
        <servlet-name>action</servlet-name>
        <servlet-class>org.apache.struts.action.ActionServlet</servlet-class>
        <init-param>
            <param-name>config</param-name>
            <param-value>/WEB-INF/struts-config.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>action</servlet-name>
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>

    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
</web-app>


<struts-config>
    <form-beans>
        <form-bean name="questionForm" type="form.QuestionForm" />
    </form-beans>

    <action-mappings>
        <action path="/question" type="action.QuestionAction"
                name="questionForm" scope="request" input="/index.jsp">
            <forward name="success" path="/index.jsp" />
        </action>
    </action-mappings>
</struts-config>




<%@ page contentType="text/html;charset=UTF-8" %>
<%@ taglib uri="http://struts.apache.org/tags-html" prefix="html" %>
<%@ page import="java.util.List, model.Question" %>

<html>
<head><title>問題管理</title></head>
<body>
<h2>問題入力</h2>

<html:form action="/question.do">
    問題ID: <html:text property="id" readonly="true"/><br/>
    問題内容: <html:text property="content" maxlength="30"/><br/>

    <html:submit property="method" value="登録"/>
    <html:submit property="method" value="変更入力"/>

    <br/><font color="red"><html:errors/></font>

    <h3>問題一覧</h3>
    <table border="1">
        <tr><th>問題ID</th><th>問題内容</th><th>選択</th></tr>
        <%
            List<Question> list = (List<Question>) request.getAttribute("questionList");
            if (list != null) {
                for (Question q : list) {
        %>
            <tr>
                <td><%= q.getId() %></td>
                <td><%= q.getContent() %></td>
                <td><input type="checkbox" name="selectedId" value="<%= q.getId() %>"/></td>
            </tr>
        <%
                }
            }
        %>
    </table>
</html:form>

</body>
</html>




package form;

import org.apache.struts.action.ActionForm;

public class QuestionForm extends ActionForm {
    private String id;
    private String content;
    private String method;
    private String[] selectedId;

    // Getters and Setters
}


package model;

public class Question {
    private int id;
    private String content;

    // Getters and Setters
}



package dao;

import java.sql.*;
import java.util.*;
import model.Question;

public class QuestionDAO {
    private final String url = "jdbc:sqlserver://localhost:1433;databaseName=QuestionDB";
    private final String user = "sa";
    private final String password = "your_password";

    public void insert(String content) throws Exception {
        Connection conn = getConnection();
        PreparedStatement ps = conn.prepareStatement("INSERT INTO Questions (content) VALUES (?)");
        ps.setString(1, content);
        ps.executeUpdate();
        close(ps, conn);
    }

    public List<Question> getAll() throws Exception {
        List<Question> list = new ArrayList<>();
        Connection conn = getConnection();
        Statement st = conn.createStatement();
        ResultSet rs = st.executeQuery("SELECT * FROM Questions ORDER BY id");
        while (rs.next()) {
            Question q = new Question();
            q.setId(rs.getInt("id"));
            q.setContent(rs.getString("content"));
            list.add(q);
        }
        close(rs, st, conn);
        return list;
    }

    public Question getById(int id) throws Exception {
        Connection conn = getConnection();
        PreparedStatement ps = conn.prepareStatement("SELECT * FROM Questions WHERE id = ?");
        ps.setInt(1, id);
        ResultSet rs = ps.executeQuery();
        Question q = null;
        if (rs.next()) {
            q = new Question();
            q.setId(rs.getInt("id"));
            q.setContent(rs.getString("content"));
        }
        close(rs, ps, conn);
        return q;
    }

    private Connection getConnection() throws Exception {
        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
        return DriverManager.getConnection(url, user, password);
    }

    private void close(AutoCloseable... resources) {
        for (AutoCloseable res : resources) {
            try { if (res != null) res.close(); } catch (Exception e) {}
        }
    }
}


package util;

public class ZenkakuValidator {
    public static boolean isAllZenkaku(String s) {
        for (char c : s.toCharArray()) {
            if (Character.UnicodeBlock.of(c) != Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS &&
                Character.UnicodeBlock.of(c) != Character.UnicodeBlock.HIRAGANA &&
                Character.UnicodeBlock.of(c) != Character.UnicodeBlock.KATAKANA &&
                !Character.isWhitespace(c)) {
                return false;
            }
        }
        return true;
    }
}



package action;

import javax.servlet.http.*;
import org.apache.struts.action.*;

import dao.QuestionDAO;
import form.QuestionForm;
import model.Question;
import util.ZenkakuValidator;

import java.util.*;

public class QuestionAction extends Action {
    public ActionForward execute(ActionMapping mapping, ActionForm form,
                                 HttpServletRequest request, HttpServletResponse response) throws Exception {
        QuestionForm f = (QuestionForm) form;
        QuestionDAO dao = new QuestionDAO();

        if ("登録".equals(f.getMethod())) {
            // 校验
            if (f.getContent() == null || f.getContent().trim().isEmpty()) {
                return error(mapping, request, "内容が空です");
            }
            if (!ZenkakuValidator.isAllZenkaku(f.getContent())) {
                return error(mapping, request, "全角文字のみ入力できます");
            }
            if (f.getContent().length() > 30) {
                return error(mapping, request, "30文字を超えて入力できません");
            }
            dao.insert(f.getContent());
            f.setId("");
            f.setContent("");
        } else if ("変更入力".equals(f.getMethod())) {
            if (f.getSelectedId() == null || f.getSelectedId().length == 0) {
                return error(mapping, request, "チェックボックスが選択されていません");
            }
            if (f.getSelectedId().length > 1) {
                return error(mapping, request, "チェックボックスは一つのみ選択してください");
            }
            int selected = Integer.parseInt(f.getSelectedId()[0]);
            Question q = dao.getById(selected);
            f.setId(String.valueOf(q.getId()));
            f.setContent(q.getContent());
        }

        request.setAttribute("questionList", dao.getAll());
        return mapping.findForward("success");
    }

    private ActionForward error(ActionMapping mapping, HttpServletRequest req, String msg) {
        ActionMessages errors = new ActionMessages();
        errors.add("error", new ActionMessage(msg, false));
        saveErrors(req, errors);
        return mapping.findForward("success");
    }
}
